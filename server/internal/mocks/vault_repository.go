// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/maynagashev/gophkeeper/models"
	mock "github.com/stretchr/testify/mock"
)

// VaultRepository is an autogenerated mock type for the VaultRepository type
type VaultRepository struct {
	mock.Mock
}

type VaultRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *VaultRepository) EXPECT() *VaultRepository_Expecter {
	return &VaultRepository_Expecter{mock: &_m.Mock}
}

// CreateVault provides a mock function with given fields: ctx, vault
func (_m *VaultRepository) CreateVault(ctx context.Context, vault *models.Vault) (int64, error) {
	ret := _m.Called(ctx, vault)

	if len(ret) == 0 {
		panic("no return value specified for CreateVault")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Vault) (int64, error)); ok {
		return rf(ctx, vault)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Vault) int64); ok {
		r0 = rf(ctx, vault)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Vault) error); ok {
		r1 = rf(ctx, vault)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VaultRepository_CreateVault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVault'
type VaultRepository_CreateVault_Call struct {
	*mock.Call
}

// CreateVault is a helper method to define mock.On call
//   - ctx context.Context
//   - vault *models.Vault
func (_e *VaultRepository_Expecter) CreateVault(ctx interface{}, vault interface{}) *VaultRepository_CreateVault_Call {
	return &VaultRepository_CreateVault_Call{Call: _e.mock.On("CreateVault", ctx, vault)}
}

func (_c *VaultRepository_CreateVault_Call) Run(run func(ctx context.Context, vault *models.Vault)) *VaultRepository_CreateVault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Vault))
	})
	return _c
}

func (_c *VaultRepository_CreateVault_Call) Return(_a0 int64, _a1 error) *VaultRepository_CreateVault_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VaultRepository_CreateVault_Call) RunAndReturn(run func(context.Context, *models.Vault) (int64, error)) *VaultRepository_CreateVault_Call {
	_c.Call.Return(run)
	return _c
}

// GetVaultByUserID provides a mock function with given fields: ctx, userID
func (_m *VaultRepository) GetVaultByUserID(ctx context.Context, userID int64) (*models.Vault, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetVaultByUserID")
	}

	var r0 *models.Vault
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Vault, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Vault); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Vault)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VaultRepository_GetVaultByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVaultByUserID'
type VaultRepository_GetVaultByUserID_Call struct {
	*mock.Call
}

// GetVaultByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *VaultRepository_Expecter) GetVaultByUserID(ctx interface{}, userID interface{}) *VaultRepository_GetVaultByUserID_Call {
	return &VaultRepository_GetVaultByUserID_Call{Call: _e.mock.On("GetVaultByUserID", ctx, userID)}
}

func (_c *VaultRepository_GetVaultByUserID_Call) Run(run func(ctx context.Context, userID int64)) *VaultRepository_GetVaultByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *VaultRepository_GetVaultByUserID_Call) Return(_a0 *models.Vault, _a1 error) *VaultRepository_GetVaultByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VaultRepository_GetVaultByUserID_Call) RunAndReturn(run func(context.Context, int64) (*models.Vault, error)) *VaultRepository_GetVaultByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetVaultWithCurrentVersionByUserID provides a mock function with given fields: ctx, userID
func (_m *VaultRepository) GetVaultWithCurrentVersionByUserID(ctx context.Context, userID int64) (*models.Vault, *models.VaultVersion, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetVaultWithCurrentVersionByUserID")
	}

	var r0 *models.Vault
	var r1 *models.VaultVersion
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Vault, *models.VaultVersion, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Vault); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Vault)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) *models.VaultVersion); ok {
		r1 = rf(ctx, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.VaultVersion)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VaultRepository_GetVaultWithCurrentVersionByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVaultWithCurrentVersionByUserID'
type VaultRepository_GetVaultWithCurrentVersionByUserID_Call struct {
	*mock.Call
}

// GetVaultWithCurrentVersionByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *VaultRepository_Expecter) GetVaultWithCurrentVersionByUserID(ctx interface{}, userID interface{}) *VaultRepository_GetVaultWithCurrentVersionByUserID_Call {
	return &VaultRepository_GetVaultWithCurrentVersionByUserID_Call{Call: _e.mock.On("GetVaultWithCurrentVersionByUserID", ctx, userID)}
}

func (_c *VaultRepository_GetVaultWithCurrentVersionByUserID_Call) Run(run func(ctx context.Context, userID int64)) *VaultRepository_GetVaultWithCurrentVersionByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *VaultRepository_GetVaultWithCurrentVersionByUserID_Call) Return(_a0 *models.Vault, _a1 *models.VaultVersion, _a2 error) *VaultRepository_GetVaultWithCurrentVersionByUserID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *VaultRepository_GetVaultWithCurrentVersionByUserID_Call) RunAndReturn(run func(context.Context, int64) (*models.Vault, *models.VaultVersion, error)) *VaultRepository_GetVaultWithCurrentVersionByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVaultCurrentVersion provides a mock function with given fields: ctx, vaultID, versionID
func (_m *VaultRepository) UpdateVaultCurrentVersion(ctx context.Context, vaultID int64, versionID int64) error {
	ret := _m.Called(ctx, vaultID, versionID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVaultCurrentVersion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, vaultID, versionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VaultRepository_UpdateVaultCurrentVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVaultCurrentVersion'
type VaultRepository_UpdateVaultCurrentVersion_Call struct {
	*mock.Call
}

// UpdateVaultCurrentVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - vaultID int64
//   - versionID int64
func (_e *VaultRepository_Expecter) UpdateVaultCurrentVersion(ctx interface{}, vaultID interface{}, versionID interface{}) *VaultRepository_UpdateVaultCurrentVersion_Call {
	return &VaultRepository_UpdateVaultCurrentVersion_Call{Call: _e.mock.On("UpdateVaultCurrentVersion", ctx, vaultID, versionID)}
}

func (_c *VaultRepository_UpdateVaultCurrentVersion_Call) Run(run func(ctx context.Context, vaultID int64, versionID int64)) *VaultRepository_UpdateVaultCurrentVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *VaultRepository_UpdateVaultCurrentVersion_Call) Return(_a0 error) *VaultRepository_UpdateVaultCurrentVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VaultRepository_UpdateVaultCurrentVersion_Call) RunAndReturn(run func(context.Context, int64, int64) error) *VaultRepository_UpdateVaultCurrentVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewVaultRepository creates a new instance of VaultRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVaultRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VaultRepository {
	mock := &VaultRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
