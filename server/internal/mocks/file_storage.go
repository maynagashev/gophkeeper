// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// FileStorage is an autogenerated mock type for the FileStorage type
type FileStorage struct {
	mock.Mock
}

type FileStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *FileStorage) EXPECT() *FileStorage_Expecter {
	return &FileStorage_Expecter{mock: &_m.Mock}
}

// DownloadFile provides a mock function with given fields: ctx, objectKey
func (_m *FileStorage) DownloadFile(ctx context.Context, objectKey string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, objectKey)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(ctx, objectKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, objectKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, objectKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileStorage_DownloadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFile'
type FileStorage_DownloadFile_Call struct {
	*mock.Call
}

// DownloadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - objectKey string
func (_e *FileStorage_Expecter) DownloadFile(ctx interface{}, objectKey interface{}) *FileStorage_DownloadFile_Call {
	return &FileStorage_DownloadFile_Call{Call: _e.mock.On("DownloadFile", ctx, objectKey)}
}

func (_c *FileStorage_DownloadFile_Call) Run(run func(ctx context.Context, objectKey string)) *FileStorage_DownloadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FileStorage_DownloadFile_Call) Return(_a0 io.ReadCloser, _a1 error) *FileStorage_DownloadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileStorage_DownloadFile_Call) RunAndReturn(run func(context.Context, string) (io.ReadCloser, error)) *FileStorage_DownloadFile_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function with given fields: ctx, objectKey, reader, size, contentType
func (_m *FileStorage) UploadFile(ctx context.Context, objectKey string, reader io.Reader, size int64, contentType string) error {
	ret := _m.Called(ctx, objectKey, reader, size, contentType)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, int64, string) error); ok {
		r0 = rf(ctx, objectKey, reader, size, contentType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileStorage_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type FileStorage_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - objectKey string
//   - reader io.Reader
//   - size int64
//   - contentType string
func (_e *FileStorage_Expecter) UploadFile(ctx interface{}, objectKey interface{}, reader interface{}, size interface{}, contentType interface{}) *FileStorage_UploadFile_Call {
	return &FileStorage_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, objectKey, reader, size, contentType)}
}

func (_c *FileStorage_UploadFile_Call) Run(run func(ctx context.Context, objectKey string, reader io.Reader, size int64, contentType string)) *FileStorage_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), args[3].(int64), args[4].(string))
	})
	return _c
}

func (_c *FileStorage_UploadFile_Call) Return(_a0 error) *FileStorage_UploadFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileStorage_UploadFile_Call) RunAndReturn(run func(context.Context, string, io.Reader, int64, string) error) *FileStorage_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileStorage creates a new instance of FileStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileStorage {
	mock := &FileStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
